GNB Linux 部署说明

GNB是一个具有NAT穿透能力的通过P2P进行三层网络交换的系统， GNB可以让用户把异地的办公环境以及家庭环境组成一个虚拟的局域网，这个虚拟的局域网中的机器不需要公网服务器中转就可以实现TCP/IP通讯。

与大多数内网穿透的软件实现应用层协议代理不同，GNB是通过虚拟网卡实现IP分组转发，支持应用层所有基于TCP/IP的通信协议。

GNB的的安全基于ED25519交换密钥，IP分组的加密有XOR与RC4两个加密算法可选，也可以选择不加密；IP分组加密密钥会根据时钟每隔一段时间会更新一次，因此必须要确保节点中的机器时间必须同步。

本文以 Linux 为环境作为测试环境，macOS和Windows10环境类似，Windows10环境需要安装虚拟网卡驱动。

开始部署

软件包中有三个预先设置好的节点 1001 1002 1003，节点1001在配置文件里被设为index节点与forward节点(index与forward节点的相关概念在下文中有详细描述)

通过修改 conf/1002和 conf/1003 address.conf，设置好 1001节点 在实际运行环境中的ip地址，就可以通过执行sh目录下的脚本启动节点。


例如，在Linux下启动节点1001就执行
./gnb_linux_x86_64.sh start 1001

如果要关闭节点1001，就执行
./gnb_linux_x86_64.sh stop 1001



如果打算自行配置节点，则需要仔细阅读下面的说明。

每个接入GNB网络的设备都是一个GNB节点，每个节点拥有唯一的UUID，被称为nodeid，这是一个32bit无符号整型数字，可以由人工分配，必须保证每个节点的nodeid在整个GNB网络中是唯一的。

GNB节点的配置文件集中存放在一个目录下，一般情况下，每个节点的配置目录作为一个子目录放在 conf 目录下，可以用节点的nodeid来命名。

例如有 1001、1002、1003 三个节点，那么 conf/ 应该存在以下三个目录

conf/1001
conf/1002
conf/1003


目录下有几个配置文件 node.conf route.conf address.conf


node.conf:

以下是 node.conf 一个例子：
nodeid 1001
lisen  9001

node.conf 用于存放节点的配置信息，格式如下
nodeid $nodeid
lisen  $lisen_port



route.conf:
GNB网络里所有的节点共享的一张路由表，配置文件是route.conf

以下是 route.conf 一个例子：
1001|10.1.0.1|255.255.255.0
1002|10.1.0.2|255.255.255.0
1003|10.1.0.3|255.255.255.0

配置文件中的每一行是一个节点的描述，格式如下
$nodeid|$tun_ipv4|$tun_netmask


每个配置项的含义是这样
$nodeid          节点的UUID
$tun_ipv4        虚拟网卡的IPV4地址
$tun_netmask     虚拟网卡的IPV4地址的子网掩码


如果gnb运行两个网络的网关上，通过配置 route.conf 可以让两个ipv4子网内的设备进行互访，即使这些设备上没有运行gnb。
要注意的是，目前仍然需要自行在出口网关上设定路由
例如有一个虚拟ip为 10.1.0.2 的GNB节点，节点所在的内网是 192.168.0.0/24，想要在本地主机（没有运行GNB服务）上访问直接访问 192.168.0.0/24 里的主机,那么位于出口网关的GNB配置route.conf应该包含这两项配置

1002|10.1.0.2|255.255.255.0
1002|192.168.0.0|255.255.255.0

在出口网关上加一条路由
ip route add 192.168.0.0/24 via 10.1.0.2

为了让对端 192.168.0.0/24 子网中的机器能够访问到本地主机，在对端虚拟ip 为 10.1.0.2 的GNB节点上也需要为到达本地设一条路由。

这些路由指令可以在 script/if_up_linux.sh 中预设好，GNB启动时会调用这些脚本。


address.conf
用于配置节点的属性和公网ip地址及端口

以下是 address.conf 一个例子：

i|0|a.a.a.a|9001
if|1001|b.b.b.b|9001
n|1002|c.c.c.c|9001

其中，a.a.a.a b.b.b.b c.c.c.c 代表公网ip地址，需要根据实际情况填写


配置文件中的每一行是一个地址
的描述，格式如下
$attrib|$nodeid|$ipv4/$ipv6|$port


$attrib      节点的属性，用一组字符来表示，i表示这个节点是index节点，f表示这个节点是forward节点，n表示这个节点是一个普通的GNB节点
$nodeid      节点的ID，与 route.conf 中的$nodeid相对应
$ipv6        GNB节点的IPV6地址
$ipv4        GNB节点的IPV4地址
$port        GNB节点的服务端口


如果一个节点同时拥有ipv4和ipv6地址，这就需要分两行配置项，GNB会通过 ping-pong 协议方式去测量该节点哪个ip地址有更低的延时，在发送ip分组数据的时候自动发往低延时的地址。


index节点的作用类似于DNS，如果一组相互之间不知道对方ip地址和端口的GNB节点都向同一个index节点提交自身的ip地址和端口，那这些GNB节点就可以通过对端节点的公钥向index查询对端节点的ip地址和端口。
GNB index 协议允许在提交和查询节点ip地址端口过程中不验证报文的数字签名,即index节点允许对提交和查询ip的报文不验证数字签名，普通节点对index节点响应查询ip的报文不验证数字签名。
index节点可以不绑定nodeid，不需要在 route.conf 配置文件中描述，对于不绑定nodeid的index节点被定义为 public gnb index node 并在 address.conf 中把 $nodeid 这一列设置成0。

forward节点可以为无法直接互访的GNB节点中转ip分组，这些节点通常部署在内网中且没有固定公网ip，并且用尽了所有的办法都无法实现nat穿透实现点对点通讯，forward节点并不能解密两个节点之间的通信的内容。
出于安全考虑，forward节点必须绑定 nodeid 作为配置项出现在 route.conf 中，与 gnb forward 协议相关的报文都要发送验证节点的数字签名，即要求forward节点和通过forward节点转发报文的普通节点都必须相互交换了公钥。


在 address.conf 中 index节点和forward节点可以有多项，包括可以有多项 $nodeid设为0的 public gnb index node。
一旦配置了多个index节点或forward节点, 就可以使用GNB的index和forward服务的负载均衡和容错模式，具体说明可以通过执行以下命令查看

gnb -h

GNB节点通过非对称加密来交换通讯的密钥，这是GNB节点通信的基础，因此需要为每个GNB节点创建一组公私钥，两个节点需要交换公钥才能进行通讯。

公私钥的命名分别是以节点的UUID为文件名 .private 和 .public 为文件的后缀名，以UUID为1001的节点公私钥文件应为 1001.public 1001.private

GNB 提供了一个名为 gnb_crypto 命令行工具，用于生成公私钥，

./gnb_crypto -c -p 1001.private -k 1001.public

本节点的公私钥存放在 conf/$uuid32/security/ 目录下，其他节点的公钥存放 conf/$uuid32/ed25519/

以UUID为1001的节点为例

conf/1001/security/ 目录下应该有 1001.private 1001.public

conf/1001/ed25519/ 目录下有 1002.public 1003.public


script/目录下存放了一组脚本
if_up_linux.sh   是在虚拟网卡启动之后调用的脚本，用于用户自定义设置路由，防火墙的指令
if_down_linux.sh 是在虚拟网卡将要关闭时调用的脚本


如果打算自行实现GNB的启动脚本，以下是一个例子

以启动UUID为1001的节点为例：

在 sh 目录下创建一个脚本 1001.sh，内容为

killall -9 gnb

nohup ../bin/gnb -i LinuxTun1001 -c ../conf/1001 >/dev/null 2>&1 &


在Linux下节点启动后，可以用 ip addr 查看虚拟网卡是否启动成功，并尝试用 ping 测试 各节点的虚拟 ip 是否能够ping通。

